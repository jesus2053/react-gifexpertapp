{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAUA,OACE,sBAAMC,SAPa,SAACC,GACpBA,EAAEC,iBAEFN,GAAc,SAACO,GAAD,OAAeL,GAAf,mBAA8BK,QAI5C,SACE,uBAAOC,KAAK,OAAOC,MAAOP,EAAYQ,SAXhB,SAACL,GACzBF,EAAcE,EAAEM,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAOL,GAAP,qBAAAM,EAAA,6DACfC,EADe,iDACiCC,UACpDR,GAFmB,+DAKFS,MAAMF,GALJ,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KANa,kBAQdA,EAAKC,KAAI,SAACC,GAAS,IAAD,EACvB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,SAZjB,2CAAH,sDCEPY,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAEvC,OADAa,QAAQC,IAAI,CAAEN,KAAIC,QAAOT,QAEvB,sBAAKe,UAAU,yCAAf,UACE,qBAAKC,IAAKhB,EAAKiB,IAAKR,IACpB,4BAAIA,QCJGS,EAAU,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SACxB,ECD0B,SAACA,GAC3B,MAA0BN,mBAAS,CACjCkB,KAAM,GACNc,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACRxB,EAAQL,GAAU8B,MAAK,SAACC,GACtBC,YAAW,WACTZ,QAAQC,IAAIU,GACZH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,MAEV,UAEJ,CAAC1B,IAEG2B,EDjBmBM,CAAajC,GAA/BY,EAAR,EAAQA,KAAMc,EAAd,EAAcA,QAEd,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDtB,IAElD0B,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACGV,EAAKC,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aETnBmB,EAAe,WAE1B,MAAoCxC,mBAAS,CAAC,cAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAOA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG0C,EAAWtB,KAAI,SAACb,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MChB/BoC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.4167b4a9.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategorias }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    setCategorias((category) => [inputValue, ...category]);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type='text' value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategorias: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=TTPxBJOlSCziWUg1cSzFswK63Z0P0w4S`;\r\n\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  return data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  console.log({ id, title, url });\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n      {/* {loading ? 'Cargando...' : 'Data cargada'} */}\r\n      {loading && <p className='animate__animated animate__flash'>Loading</p>}\r\n      <div className='card-grid'>\r\n        {data.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setTimeout(() => {\r\n        console.log(imgs);\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      }, 1000);\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n  // const categorias = ['One Punch'];\r\n  const [categorias, setCategorias] = useState(['One Punch']);\r\n\r\n  // const handleAdd = () => {\r\n  //   // setCategorias((c) => [...c, 'DCComics']); // Esto es otra forma de hacerlo\r\n  //   setCategorias([...categorias, 'DCComics']);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategorias={setCategorias} />\r\n      <hr />\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n      <ol>\r\n        {categorias.map((category) => {\r\n          return <GifGrid key={category} category={category} />;\r\n        })}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}